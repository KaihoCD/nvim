return {
  -- stylua: ignore start
	-- Top Pickers
	{ '<leader><space>', function() Snacks.picker.smart() end, desc = 'Smart Find Files' },
	{ '<leader>,', function() Snacks.picker.buffers() end, desc = '[,] Buffers' },
	{ '<leader>/', function() Snacks.picker.grep() end, desc = '[/] Grep' },
	-- LSP
	{ 'gd', function() Snacks.picker.lsp_definitions() end, desc = '[g]oto Definition' },
	{ 'gD', function() Snacks.picker.lsp_declarations() end, desc = '[g]oto Declaration' },
	{ 'gr', function() Snacks.picker.lsp_references() end, nowait = true, desc = '[g]oto [r]eferences' },
	{ 'gI', function() Snacks.picker.lsp_implementations() end, desc = '[g]oto Implementation' },
	{ 'gy', function() Snacks.picker.lsp_type_definitions() end, desc = '[g]oto T[y]pe Definition' },
	{ ']]', function() Snacks.words.jump(vim.v.count1) end, desc = 'Next Reference', mode = { 'n', 't' } },
	{ '[[', function() Snacks.words.jump(-vim.v.count1) end, desc = 'Prev Reference', mode = { 'n', 't' } },
	{ '<leader>ls', function() Snacks.picker.lsp_symbols() end, desc = '[s]ymbols' },
	{ '<leader>lS', function() Snacks.picker.lsp_workspace_symbols() end, desc = 'Workspace [S]ymbols' },
	-- git
	{ '<leader>gb', function() Snacks.picker.git_branches() end, desc = 'Branches' },
	{ '<leader>gB', function() Snacks.gitbrowse() end, desc = 'Browse', mode = { 'n', 'v' } },
	{ '<leader>gl', function() Snacks.picker.git_log() end, desc = 'Log' },
	{ '<leader>gL', function() Snacks.picker.git_log_line() end, desc = 'Log Line' },
	{ '<leader>gs', function() Snacks.picker.git_status() end, desc = 'Status' },
	{ '<leader>gS', function() Snacks.picker.git_stash() end, desc = 'Stash' },
	{ '<leader>gd', function() Snacks.picker.git_diff() end, desc = 'Diff (Hunks)' },
	{ '<leader>gf', function() Snacks.picker.git_log_file() end, desc = 'Log File' },
	{ '<leader>gg', function() Snacks.lazygit() end, desc = 'LazyGit' },
	-- find
	{ '<leader>fb', function() Snacks.picker.buffers() end, desc = '[b]uffers' },
	{ '<leader>fc', function() Snacks.picker.files({ cwd = vim.fn.stdpath('config') }) end, desc = '[c]onfig File' },
	{ '<leader>ff', function() Snacks.picker.files() end, desc = '[f]iles' },
	{ '<leader>fg', function() Snacks.picker.git_files() end, desc = '[g]it Files' },
	{ '<leader>fp', function() Snacks.picker.projects() end, desc = '[p]rojects' },
	{ '<leader>fr', function() Snacks.picker.recent() end, desc = '[r]ecent' },
	-- Grep
	{ '<leader>sb', function() Snacks.picker.lines() end, desc = '[b]uffer Lines' },
	{ '<leader>sB', function() Snacks.picker.grep_buffers() end, desc = 'Grep Open [B]uffers' },
	{ '<leader>sg', function() Snacks.picker.grep() end, desc = '[g]rep' },
	{ '<leader>sw', function() Snacks.picker.grep_word() end, desc = '[w]ord | Visual selection', mode = { 'n', 'x' } },
	-- search
	{ '<leader>s"', function() Snacks.picker.registers() end, desc = 'Registers["]' },
	{ '<leader>s/', function() Snacks.picker.search_history() end, desc = '[/] History' },
	{ '<leader>sa', function() Snacks.picker.autocmds() end, desc = '[a]utocmds' },
	{ '<leader>sc', function() Snacks.picker.command_history() end, desc = '[c]ommand History' },
	{ '<leader>sC', function() Snacks.picker.commands() end, desc = '[C]ommands' },
	{ '<leader>sd', function() Snacks.picker.diagnostics() end, desc = '[D]iagnostics' },
	{ '<leader>sD', function() Snacks.picker.diagnostics_buffer() end, desc = 'Buffer [D]iagnostics' },
	{ '<leader>sh', function() Snacks.picker.help() end, desc = '[h]elp Pages' },
	{ '<leader>sH', function() Snacks.picker.highlights() end, desc = '[H]ighlights' },
	{ '<leader>si', function() Snacks.picker.icons() end, desc = '[i]cons' },
	{ '<leader>sj', function() Snacks.picker.jumps() end, desc = '[j]umps' },
	{ '<leader>sk', function() Snacks.picker.keymaps() end, desc = '[k]eymaps' },
	{ '<leader>sl', function() Snacks.picker.loclist() end, desc = '[l]ocation List' },
	{ '<leader>sm', function() Snacks.picker.marks() end, desc = '[m]arks' },
	{ '<leader>sM', function() Snacks.picker.man() end, desc = '[M]an Pages' },
	{ '<leader>sp', function() Snacks.picker.lazy() end, desc = 'Search for [p]lugin Spec' },
	{ '<leader>sq', function() Snacks.picker.qflist() end, desc = '[q]uickfix List' },
	{ '<leader>sR', function() Snacks.picker.resume() end, desc = '[R]esume' },
	{ '<leader>su', function() Snacks.picker.undo() end, desc = '[u]ndo History' },
	{ '<leader>sT', function() Snacks.picker.colorschemes() end, desc = '[T]heme' },
	-- stylua: ignore end
}
